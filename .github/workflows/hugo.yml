name: Deploy Hugo

on:
  push:
    branches: ["dev"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "hugo"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # Required dependencies for the workflow
      - name: Pre-dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install jq

      # Install the latest version for Hugo CLI
      - name: Install Hugo CLI
        run: |
          cd ${{ runner.temp }}          
          curl -s --silent -N "https://api.github.com/repos/gohugoio/hugo/releases/latest" | jq '.assets[] | select(.name | contains("hugo_extended_") and contains("_linux-amd64.deb"))' | jq .browser_download_url | xargs wget -qO- > hugo.deb
          curl -s --silent -N "https://api.github.com/repos/gohugoio/hugo/releases/latest" | jq '.assets[] | select(.name | contains("_checksums.txt"))' | jq .browser_download_url | xargs wget -qO- > checksums.txt
          if ! grep $(sha256sum hugo.deb | awk '{print $1}') checksums.txt
          then
            echo "Checksum does not match! Aborting..."
            exit 1
          fi
          sudo dpkg -i ${{ runner.temp }}/hugo.deb
      
      # Checkout sub-modules (in case present)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Build site for production
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          BRANCH: ${{github.ref}}
          BASE_URL_A: ${{ vars.BASE_URL_A }}
          BASE_URL_B: ${{ vars.BASE_URL_B }}
        run: |
          if [ $BRANCH == 'refs/heads/main' ];
          then
            echo 'Preparing for: [main]'
            export BASE_URL="$BASE_URL_A"
          else
            echo 'Preparing for: [dev]'
            export BASE_URL="$BASE_URL_B"
          fi

          cd site-pingpablo-com/
          pwd && ls -lah
          echo "Building site - $BASE_URL"
          hugo \
            --minify \
            --baseURL $BASE_URL

      # Deploy!
      - name: Deploy artifact
        env:
          BRANCH: ${{github.ref}}
          DEPLOY_PRE: ${{ vars.DEPLOY_PRE }}
          DEPLOY: ${{ vars.DEPLOY_ACTION }}
          DEPLOY_DATA_A: ${{ secrets.DEPLOY_DATA_A }}
          DEPLOY_DATA_B: ${{ secrets.DEPLOY_DATA_B }}
          DEPLOY_DATA_C: ${{ secrets.DEPLOY_DATA_C }}
          DEPLOY_DATA_D: ${{ secrets.DEPLOY_DATA_D }}
        run: |
          eval $DEPLOY_PRE

          if [ $BRANCH == 'refs/heads/main' ];
          then
            echo 'Preparing for: [main]'
            export DEPLOY_DATA="$DEPLOY_DATA_C"
          else
            echo 'Preparing for: [dev]'
            export DEPLOY_DATA="$DEPLOY_DATA_D"
          fi
          cd site-pingpablo-com/public/
          pwd && ls -lah
          echo "Deploying..."
          eval $DEPLOY
          #echo $DEPLOY > script.sh
          #chmod +x script.sh
          #./script.sh
